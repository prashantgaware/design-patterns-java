Object cloning:
    - Object cloning is a way to create exact copy of an object.
    - It is achieved by implementing Cloneable interface.
    - It is a shallow copy.
    - It is a bit faster than creating a new object using new keyword.
    - It is a bit risky because it involves typecasting.
    - It is not recommended to use clone() method to create a new object.
    4 types of cloning:
        1. Shallow cloning
        2. Deep cloning
        3. Copy constructor
        4. Serialization
    - Initially cloned object is exactly same as original object. But if we change the cloned object, original object will not be affected.
    - If we change the original object, cloned object will not be affected.

    - When object is created using as cloning, constructor is not called.
    - but when we create object using new keyword, constructor is called.
    - Generally developers dont directly use Cloneable interface. They use copy constructor or serialization.

    - The clone() is proteted method in Object class. So, we need to override it in our class.
    - If we dont override clone() method in our class, then we will get CloneNotSupportedException.


Reflection API:
    - Reflection API is used to inspect or modify runtime behavior of applications.
    - It is used to inspect classes, interfaces, fields, methods at runtime.
    - It is used to instantiate classes, invoke methods, get/set field values at runtime.
    - It is used to create dynamic proxy, get annotations, get super class, get interfaces,
      get package, get constructors, get methods, get fields, get modifiers, get annotations


Different approaches of developing perfect singleton class:
    1. Eager initialization
    2. Static block initialization
    3. Lazy initialization
    4. Thread safe singleton
    5. Bill Pugh Singleton Implementation
    6. Enum Singleton
    7. Serialization and Deserialization
    8. Reflection
    9. Cloning
    10. Double checked locking
    11. Using volatile keyword
    12. Using inner static helper class
    13. Using enum
    14. Using static factory method
    15. Using single element enum
    16. Using single element enum with static factory method
    17. Using single element enum with static factory method and lazy initialization
    18. Using single element enum with static factory method and eager initialization
    19. Using single element enum with static factory method and double checked locking
    20. Using single element enum with static factory method and volatile keyword
    21. Using single element enum with static factory method and inner static helper class
    22. Using single element enum with static factory method and reflection
    23. Using single element enum with static factory method and cloning
    24. Using single element enum with static factory method and serialization and deserialization
    25. Using single element enum with static factory method and thread safe singleton
    26. Using single element enum with static factory method and Bill Pugh Singleton Implementation
    27. Using single element enum with static factory method and eager initialization
    28. Using single element enum with static factory method and static block initialization
    29. Using single element enum with static factory method and lazy initialization


Enum based singleton class:
    - Enum based singleton class is the best
    - It is thread safe
    - It is serialization safe
    - It is reflection safe
    - It is cloning safe
    - It is lazy initialization
    - Every enum is class itself and it is loaded by JVM only once.
    - Enum based singleton class is created by using enum keyword.
    - Enum based singleton class is created by using single element enum.
    - ex PrinterEnum --> java.lang.Enum --> java.lang.Object
    - Enum is abstract class and it is parent class of all enums.
    - Enum is direct child class of Object class.
    - Enum is final class and it is not allowed to extend.
    - Enum is thread safe and it is created by using static block.
    - Enum implements Serializable, Comparable and Cloneable interfaces.
    - So enums are serializable, comparable and cloneable.

Why Enum based singleton class is good though we are writing less code?
    - bcos of eager instatiation is happening, there wont be any multithreading issues.
    - is easy to develop with min coding standard.
    - the clone() method is made as final in Enum class. So, we cannot override it.
    - so clone() cannot be called on the enum constants. hence we cannot do cloning.
    - every enum is serializable by default. So, we dont need to implement Serializable interface.
    - so serialization is taken care by JVM.
    - but we attempt deserialize the enum, it will return already available object/constant.
    - ie. somewjere readResolve() method is implemented in Enum class.
    - for enums, we cannot create object using reflection. So, reflection is taken care by JVM.
    - bcos enums cannot have constructor with public or protected access modifier.
    - so, we cannot create object using reflection.


Enum based singleton class limitiations:
    - we cannot apply oops feature like extends, etc
    - we cannot place static, instance member variables in enums.
    - cannot place serial version uid whilwe working with enums.
    - eager initialization is not good. bcos it will create object even if we dont use it.

